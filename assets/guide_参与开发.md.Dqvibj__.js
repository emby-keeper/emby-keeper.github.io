import{_ as i,c as a,a3 as n,o as h}from"./chunks/framework.C-yY9WsR.js";const y=JSON.parse('{"title":"参与开发","description":"","frontmatter":{"outline":[2,3]},"headers":[],"relativePath":"guide/参与开发.md","filePath":"guide/参与开发.md"}'),e={name:"guide/参与开发.md"};function k(p,s,l,t,r,F){return h(),a("div",null,s[0]||(s[0]=[n(`<h1 id="参与开发" tabindex="-1">参与开发 <a class="header-anchor" href="#参与开发" aria-label="Permalink to &quot;参与开发&quot;">​</a></h1><h2 id="提供信息以帮助开发新签到器" tabindex="-1">提供信息以帮助开发新签到器 <a class="header-anchor" href="#提供信息以帮助开发新签到器" aria-label="Permalink to &quot;提供信息以帮助开发新签到器&quot;">​</a></h2><p>欢迎! 很高兴你愿意让这个项目变得更好, 如果你希望 Embykeeper 支持一个新的签到器, 您可以通过 <a href="https://github.com/emby-keeper/emby-keeper/issues/new?assignees=&amp;labels=enhancement&amp;projects=&amp;template=feature-request.md&amp;title=%E7%AD%BE%E5%88%B0%E5%99%A8:%20%3C%E7%AB%99%E7%82%B9%3E" target="_blank" rel="noreferrer">Github Issues</a> 申请.</p><p>但是, 该 Emby 可能是邀请制 Emby, 使得开发者难以调试.</p><p>对于这类情况, 例如要在机器人 <code>test_bot</code> 处签到, 请运行命令:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">embykeeper</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config.toml</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -D</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> all@test_bot</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> tee</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> log.json</span></span></code></pre></div><p>Docker 版本需要运行:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">pwd</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/embykeeper:/app</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --rm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -it</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --net=host</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> embykeeper/embykeeper</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -D</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> message@test_bot</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -D</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> edited_message@test_bot</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> tee</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> log.json</span></span></code></pre></div><p>保持程序运行, 然后, 您需要手动在 <code>test_bot</code> 进行一次成功的签到, 然后再进行一次签到以显示 &#39;今日已签到&#39; 信息, 程序将记录该过程中的消息日志, 并输出至 <code>log.json</code>.</p><p>最后, 结束程序, 并将输出的 <code>log.json</code> 发送至 <a href="https://t.me/embykeeper_chat_bot" target="_blank" rel="noreferrer">讨论组</a> 或 <a href="https://t.me/embykeeper_prime_bot" target="_blank" rel="noreferrer">高级用户讨论组</a>.</p><p>对于有效的日志, 我们将以比视频更高优先级进行处理.</p><div class="tip custom-block"><p class="custom-block-title">提示</p><p>其他聊天的消息不会被记录. 日志中的个人信息会被隐藏, 包括用户 ID 等. 如有疑虑请在发送前检查文件.</p></div><h2 id="向-embykeeper-贡献提交" tabindex="-1">向 Embykeeper 贡献提交 <a class="header-anchor" href="#向-embykeeper-贡献提交" aria-label="Permalink to &quot;向 Embykeeper 贡献提交&quot;">​</a></h2><p>欢迎! 很高兴你愿意让这个项目变得更好, 你可以通过以下您偏好的方式开始修改代码:</p><h3 id="通过-codesandbox-在线编辑与提交" tabindex="-1">通过 Codesandbox 在线编辑与提交 <a class="header-anchor" href="#通过-codesandbox-在线编辑与提交" aria-label="Permalink to &quot;通过 Codesandbox 在线编辑与提交&quot;">​</a></h3><ol><li>进入 <a href="https://codesandbox.io/" target="_blank" rel="noreferrer">Codesandbox</a>: <a href="https://codesandbox.io/s/github/emby-keeper/emby-keeper/tree/main" target="_blank" rel="noreferrer">项目链接</a></li><li>点击右侧分栏的 <code>Terminal</code>, 点击 <code>Fork and convert</code>, 以启动一个云编辑器.</li><li>在新建的项目中, 等待项目依赖安装完成.</li><li>修改代码, 点击右侧命令列表中的命令, 即可查看效果.</li><li>您也可以点击右上角的 <code>VS Code</code> 按钮, 以查看 <code>VS Code</code> 链接到 <a href="https://codesandbox.io/" target="_blank" rel="noreferrer">Codesandbox</a> 的方法.</li><li>点击最左侧文件树上方的 Git 图标, 即可 Push 到个人仓库.</li><li>在 <a href="https://github.com/emby-keeper/emby-keeper/pulls" target="_blank" rel="noreferrer">Pull Requests</a> 提交新 Pull Request.</li></ol><h3 id="搭建本地开发环境编辑与提交" tabindex="-1">搭建本地开发环境编辑与提交 <a class="header-anchor" href="#搭建本地开发环境编辑与提交" aria-label="Permalink to &quot;搭建本地开发环境编辑与提交&quot;">​</a></h3><ol><li><p>Fork 本仓库</p></li><li><p>通过 <code>git clone &lt;forked repo&gt;</code> 以将仓库克隆到本地</p></li><li><p>创建虚拟环境:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> develop</span></span></code></pre></div></li><li><p>修改代码以实现需求, 您可以使用如下工具:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 运行 embykeeper</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run/web</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 运行 embykeeperweb</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> debugpy</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 使用 vscode 的远程调试连接到 embykeeper</span></span></code></pre></div></li><li><p>在提交 Pull Request 前, 请检查代码:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> lint</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test</span></span></code></pre></div></li><li><p>提交 Commit, 并在 <a href="https://github.com/emby-keeper/emby-keeper/pulls" target="_blank" rel="noreferrer">Pull Requests</a> 提交新 Pull Request.</p></li></ol><h2 id="开发案例" tabindex="-1">开发案例 <a class="header-anchor" href="#开发案例" aria-label="Permalink to &quot;开发案例&quot;">​</a></h2><p>主要可以扩展的类位于:</p><ul><li><code>embykeeper.telechecker.bots</code></li><li><code>embykeeper.telechecker.monitor</code></li><li><code>embykeeper.telechecker.messager</code></li></ul><p>您在开发过程中, 可以使用多种 <a href="/guide/调试工具">调试工具</a> 以方便您的调试.</p><p>当您有开发方面的疑问, 您也可以通过 <a href="https://discord.gg/MzkEy6cj" target="_blank" rel="noreferrer">Discord 讨论群</a> (推荐) 或 <a href="https://t.me/embykeeperchat" target="_blank" rel="noreferrer">Telegram 讨论群</a> 参与开发讨论.</p><h3 id="每日签到站点" tabindex="-1">每日签到站点 <a class="header-anchor" href="#每日签到站点" aria-label="Permalink to &quot;每日签到站点&quot;">​</a></h3><p>通常来说, 增加一个机器人的签到非常简单, 您需要在 <code>bots</code> 中增加一个文件 <code>dummy.py</code>:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .base </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BotCheckin</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DummyCheckin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">BotCheckin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Dummy&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    bot_username </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;dummy_bot&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    bot_captcha_len </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span></span></code></pre></div><p>您即增加一个名为 &quot;<code>Dummy</code>&quot; 的签到器, 将会向用户名为 &quot;<code>dummy_bot</code>&quot; 的机器人发送 &quot;<code>/checkin</code>&quot; 并等候一个 4 位的验证码, 识别验证码后将发送.</p><p>若您希望识别验证码后点击按钮, 您可以使用 <code>AnswerBotCheckin</code>, 您也可以重写 <code>on_captcha</code> 函数来实现自定义功能:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .base </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AnswerBotCheckin</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DummyCheckin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AnswerBotCheckin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    ...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> on_captcha</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, message: Message, captcha: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> l </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> captcha:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                await</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.message.click(l)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            except</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ValueError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.log.info(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;未能找到对应 &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">l</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot; 的按键, 正在重试.&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                await</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.retry()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                break</span></span></code></pre></div><p>上述代码实现每次按对应一个字符按键的功能.</p><p>更多签到器配置参加: <a href="https://github.com/emby-keeper/emby-keeper/blob/main/embykeeper/telechecker/bots/_base.py#L111" target="_blank" rel="noreferrer">BotCheckin 类定义</a> 和 <a href="https://github.com/emby-keeper/emby-keeper/blob/main/embykeeper/telechecker/bots/_base.py#L560" target="_blank" rel="noreferrer">AnswerBotCheckin 类定义</a></p><p>当您实现一个新的签到器时, 欢迎您提交 <a href="https://github.com/emby-keeper/emby-keeper/pulls" target="_blank" rel="noreferrer">Pull Requests</a> 以帮助更多人使用!</p><h3 id="群组监控站点" tabindex="-1">群组监控站点 <a class="header-anchor" href="#群组监控站点" aria-label="Permalink to &quot;群组监控站点&quot;">​</a></h3><p>通常来说, 增加一个群组监控站点非常简单, 您需要在 <code>monitor</code> 中增加一个文件 <code>dummy.py</code>:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .base </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Monitor</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DummyMonitor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Monitor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Dummy&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    chat_name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;dummy_chat&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    chat_user </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;dummy_bot&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    chat_keyword </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> r</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">邀请码:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\s</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">(\\w</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    chat_delay </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    bot_username </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;dummy_bot&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> on_trigger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, message, key, reply):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        await</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.client.send_message(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.bot_username, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/invite </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">key</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>更多监控器配置参加: <a href="https://github.com/emby-keeper/emby-keeper/blob/main/embykeeper/telechecker/monitor/_base.py#L100" target="_blank" rel="noreferrer">Monitor 类定义</a></p><h3 id="自动水群站点" tabindex="-1">自动水群站点 <a class="header-anchor" href="#自动水群站点" aria-label="Permalink to &quot;自动水群站点&quot;">​</a></h3><p>通常来说, 增加一个自动水群站点非常简单, 您需要在 <code>messager</code> 中增加一个文件 <code>dummy.py</code>:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .base </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Messager</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DummyMessager</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Messager</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Dummy&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    chat_name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;dummy_chat&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    default_messages </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;dummy-common-wl@latest.yaml * 100&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><p>您即增加一个名为 &quot;<code>Dummy</code>&quot; 的水群器, 将会在名为 &quot;<code>dummy_chat</code>&quot; 的群组定期发送消息.</p><p>对于 <code>default_messages</code> 和对应的配置文件项目, 详见<a href="/guide/功能说明-自动水群">水群配置文件的详细说明</a>.</p><p>更多监控水群器配置参加: <a href="https://github.com/emby-keeper/emby-keeper/blob/main/embykeeper/telechecker/messager/_base.py#L49" target="_blank" rel="noreferrer">Messager 类定义</a></p><h2 id="项目架构" tabindex="-1">项目架构 <a class="header-anchor" href="#项目架构" aria-label="Permalink to &quot;项目架构&quot;">​</a></h2><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> deploy</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   └──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Dockerfile</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">              # 每个版本发布后, 自动更新为最新版, 用于加速部分云平台的构建过程.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> embykeeper</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> __init__.py</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> __main__.py</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cli.py</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                  # 命令行入口模块.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> data.py</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                 # 额外数据下载模块, 用于从 https://github.com/emby-keeper/emby-keeper-data 下载资源文件.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> embywatcher</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">             # Emby 保活模块.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> __init__.py</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> emby.py</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">             # Emby 基础控制模块, 主要是在 embypy 基础上进行修复和增强.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   └──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> main.py</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">             # Emby 保活入口模块, 负责找到合适长度的有源视频, 模拟播放 (下载视频同时上报播放状态), 最后将进度条设为特定位置.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> log.py</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                  # 日志初始化模块, 负责格式化 loguru 日志.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> settings.py</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">             # 配置模块, 负责检查配置文件格式, 生成模板配置文件, 用于云部署的交互式配置生成, 准备配置文件.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> telechecker</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">             # Telegram 相关模块.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> __init__.py</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bots</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                # Telegram 每日签到模块.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> __init__.py</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> _base.py</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # 定义了两个基础签到器, 分别用于回复模式签到和按钮模式签到.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test.py</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         # 测试签到器, 默认不启用且在生成配置文件时忽略.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> terminus.py</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     # 以下均为各站点签到器, 在该目录增加模块将自动被识别并启用, 在模块变量部分使用 &quot;__ignore__ = True&quot; 以默认禁用.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   └──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> messager</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            # Telegram 自动水群模块.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> __init__.py</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> _base.py</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # 定义了基础水群器.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test.py</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         # 测试水群器, 默认不启用且在生成配置文件时忽略.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pornemby.py</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     # 以下均为各站点水群器, 在该目录增加模块将自动被识别并启用, 在模块变量部分使用 &quot;__ignore__ = True&quot; 以默认禁用.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   └──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> monitor</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">             # Telegram 群组监控模块.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> __init__.py</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> base.py</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         # 定义了基础监控器.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test.py</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         # 测试监控器, 默认不启用且在生成配置文件时忽略.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pornemby.py</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     # 以下均为各站点监控器, 在该目录增加模块将自动被识别并启用, 在模块变量部分使用 &quot;__ignore__ = True&quot; 以默认禁用.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   └──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   ├─</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  tele.py</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">             # 在 pyrogram 基础上进行修复和增强, 维护了一个客户端池, 通过 ClientsSession 来访问.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> debug.py</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            # 定义了多个调试工具, 包括消息列表, 消息历史记录分析, 更新记录器等.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> link.py</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">             # 实现 API 服务, 包括认证, 云任务等.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> lock.py</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">             # 签到器, 水群器, 监控器之间的联动通讯和锁.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> log.py</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">              # Telegram 日志发送, 通过 log.bind(log=True) 标记需要推送的信息.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   └──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> main.py</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">             # Telegram 签到器, 水群器, 监控器的入口模块.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> utils.py</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                # 一系列工具函数和类.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   └──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> var.py</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                  # 一系列全局变量.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Dockerfile</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                  # Docker 构建文件.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> LICENSE</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                     # 版权文件.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> MANIFEST.in</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                 # Python 包打包内容标记文件.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Makefile</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                    # Make 文件, 定义了多个便于开发的工作流.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> README.md</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                   # 项目自述文件.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> app.json</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                    # 用于 Heroku 云部署的信息文件.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> heroku.yml</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                  # 用于 Heroku 云部署的信息文件.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> images</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                      # README.md 使用的图片.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pyproject.toml</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">              # Python 项目定义文件.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> render.yaml</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                 # 用于 Render.com 云部署的信息文件.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> requirements_dev.txt</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # 供开发者使用的额外需安装包.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> scripts</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker-entrypoint.sh</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 根据 EK_WEBPASS 变量是否存在决定启动网页模式还是命令行模式的 Docker 入口函数.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tests</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   └──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test_cli.py</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">             # 基础测试文件.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tox.ini</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                     # 多版本测试文件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cli.py</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                      # 入口文件, 在安装包后应该使用 embykeeper 命令而非该文件, 该文件仅供 debugpy 挂载使用.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> web.py</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                      # 入口文件, 在安装包后应该使用 embykeepersrv 命令而非该文件, 该文件仅供 debugpy 挂载使用.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">└──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config.example.toml</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         # 参考配置文件, 可以通过首次运行 embykeeper 生成, 所有密码密钥为随机生成.</span></span></code></pre></div><h2 id="修改代码后-docker-运行" tabindex="-1">修改代码后 Docker 运行 <a class="header-anchor" href="#修改代码后-docker-运行" aria-label="Permalink to &quot;修改代码后 Docker 运行&quot;">​</a></h2><p>如果您希望修改部分代码, 并通过 Docker 运行, 请参照以下任一方法.</p><h3 id="使用-dev-系列镜像" tabindex="-1">使用 <code>dev</code> 系列镜像 <a class="header-anchor" href="#使用-dev-系列镜像" aria-label="Permalink to &quot;使用 \`dev\` 系列镜像&quot;">​</a></h3><p>Embykeeper 提供 <code>dev</code> 系列镜像, 可以实现动态读取代码.</p><p>您需要新建一个文件 <code>docker-compose.yml</code>:</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;3&#39;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">services</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  embykeeper</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    container_name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">embykeeper</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">embykeeper/embykeeper:main-dev</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    command</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;-I&#39;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    restart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">unless-stopped</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    volumes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">./embykeeper:/app</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">./embykeeper-src:/src</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    network_mode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">host</span></span></code></pre></div><p>(<code>network_mode: host</code> 用于连接主机上的代理, 若您不需要可以忽略)</p><p>然后运行:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker-compose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> up</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span></span></code></pre></div><p>这将在 <code>./embykeeper-src</code> 目录挂载源码, <code>./embykeeper/app</code> 目录挂载数据. 您可以直接修改 <code>./embykeeper-src</code> 中的源码, 重启容器后程序将据此运行.</p><p><strong>提示</strong>: 如果您需要更新 <code>dev</code> 系列镜像, 您需要直接在 <code>./embykeeper-src/</code> 目录中使用 <code>git pull</code>.</p><h3 id="使用-docker-build" tabindex="-1">使用 <code>docker build</code> <a class="header-anchor" href="#使用-docker-build" aria-label="Permalink to &quot;使用 \`docker build\`&quot;">​</a></h3><ol><li>将此代码库 Clone 到本地的一个文件夹:</li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> embykeeper/embykeeper</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./embykeeper-src</span></span></code></pre></div><ol start="2"><li>运行 <code>docker build</code> 以构建容器:</li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./embykeeper-src</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> embykeeper/embykeeper</span></span></code></pre></div><ol start="3"><li>运行 <code>docker run</code> 以启动容器:</li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">pwd</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/embykeeper:/app</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --rm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -it</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --net=host</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> embykeeper/embykeeper</span></span></code></pre></div><h3 id="使用-docker-compose-的-build-方法" tabindex="-1">使用 <code>docker-compose</code> 的 <code>build</code> 方法 <a class="header-anchor" href="#使用-docker-compose-的-build-方法" aria-label="Permalink to &quot;使用 \`docker-compose\` 的 \`build\` 方法&quot;">​</a></h3><ol><li>将此代码库克隆到本地的一个文件夹:</li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> embykeeper/embykeeper</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./embykeeper-src</span></span></code></pre></div><ol start="2"><li>新建或修改当前目录下的 <code>docker-compose.yml</code>:</li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">version:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;3&#39;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">services:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  embykeeper:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    container_name:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> embykeeper</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    build:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./embykeeper-src</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    command</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;-I&#39;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    restart:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> unless-stopped</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    volumes:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./embykeeper-data:/app</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    network_mode:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> host</span></span></code></pre></div><ol start="3"><li>启动容器:</li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker-compose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> up</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span></span></code></pre></div>`,69)]))}const g=i(e,[["render",k]]);export{y as __pageData,g as default};
